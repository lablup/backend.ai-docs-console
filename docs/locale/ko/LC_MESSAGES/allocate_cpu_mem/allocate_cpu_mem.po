# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Lablup Inc.
# This file is distributed under the same license as the Backend.AI Console
# Essential Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Console Essential Guide Enterprise R2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-16 19:17+0900\n"
"PO-Revision-Date: 2020-11-16 19:19+0900\n"
"Last-Translator: \n"
"Language: ko_KR\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.4.2\n"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:3
msgid "CPU/Memory Allocation and Using Compute Sessions"
msgstr "컨테이너 별 CPU, 메모리 자원 할당 및 연산 세션 활용"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:5
msgid "Objectives"
msgstr "목표"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:7
msgid ""
"From the GUI environment, users can create a compute session by specifying the "
"amount of CPU and memory resources dynamically"
msgstr "GUI 환경에서 CPU, 메모리 자원 옵션을 동적으로 주고 연산 세션을 생성"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:9
msgid "From the GUI, check the amount of CPU and memory resources of the session"
msgstr ""
"GUI 상에서 해당 세션의 CPU, 메모리 할당량을 확인하고 요청한 양에 맞게 생성되는"
"지 확인"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:10
msgid "Using Jupyter Notebook and Terminal apps in container environment"
msgstr "GUI 상에서 Jupyter Notebook 앱을 띄워 컨테이너 환경에서 노트북 사용"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:11
msgid ""
"Check the allocated CPU and memory resources from inside the container by "
"referencing cgroup"
msgstr "cgroup을 통한 자원 조회 후 컨테이너 수준의 자원 제약 여부 확인"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:14
msgid ""
"The most visited pages in the Backend.AI GUI Console would be the Sessions and "
"Storage pages. On the Sessions page, you can view, create, and use container-"
"based compute sessions, and on the Storage page, you can create a storage "
"folder to keep important data. Here, you will learn how to create container-"
"based compute sessions and utilize various web applications on the Sessions "
"page."
msgstr ""
"Backend.AI GUI Console에서 가장 많이 방문하게 될 페이지는 Sessions와 Storage 페"
"이지입니다. Sessions 페이지에서는 컨테이너 기반의 연산 세션을 조회하거나 생성 "
"및 사용할 수 있고, Storage 페이지에서는 데이터를 보관하는 저장 폴더를 생성할 "
"수 있습니다. 여기서는 Sessions 페이지에서 컨테이너 기반의 연산 세션을 생성하고 "
"각종 웹 애플리케이션을 활용하는 방법을 알아봅니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:23
msgid "Start a new session"
msgstr "연산 세션 생성하기"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:25
msgid ""
"After logging in with a user account, click Sessions on the left menu to visit "
"the Sessions page."
msgstr ""
"사용자 계정으로 로그인 후 좌측 메뉴의 Sessions를 클릭하여 Sessions 페이지로 이"
"동합니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:30
msgid ""
"Click the START button to start a new compute session. The following setup "
"dialog will appear. You can specify the language environment (Environments, "
"Version) and resources you want to allocate. Set the CPU and memory as shown "
"in the following figure and click the LAUNCH button. The environment was "
"chosen as TensorFlow 2.2."
msgstr ""
"새로운 연산 세션을 시작하려면 START 버튼을 클릭하세요. 다음과 같은 설정 창이 뜨"
"는데, 사용하려는 언어 환경(Environments, Version)과 자원을 설정할 수 있습니다. "
"다음 그림과 같이 CPU, 메모리 자원을 설정하고 LAUNCH 버튼을 클릭합니다. 환경은 "
"TensorFlow 2.2로 선택하였습니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:40
msgid ""
"If no mount folder is specified in the Folder to mount input box, a warning "
"dialog may appear indicating that the storage folder is not mounted. For now, "
"ignore the warning and click the LAUNCH WITHOUT STORAGE FOLDER button to "
"create a compute session. Let's see that a new compute session is created in "
"the Running tab."
msgstr ""
"이 때, Folder to mount 입력칸에 아무 마운트 폴더도 지정하지 않은 경우 저장 폴더"
"가 마운트 되지 않았다는 경고 창이 뜰 수 있습니다. 일단은 경고를 무시하고 "
"LAUNCH WITHOUT STORAGE FOLDER 버튼을 클릭하여 연산 세션을 생성합니다. RUNNING "
"탭에서 새로운 연산 세션이 생성되는 것을 확인합시다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:48
msgid ""
"You can check information such as ID, start date, usage time, resource "
"setting, and resource usage for each session. In particular, check the "
"allocated resources in the Configuration column. Note that the amounts of "
"resources you specified in creating the compute session are displayed."
msgstr ""
"각 세션 별 ID, 시작일, 사용시간, 자원 설정, 사용량 등의 정보를 확인할 수 있습니"
"다. 특히 Configuration 열의 자원 할당량을 확인 하십시오. 연산 세션을 생성할 때 "
"지정한 자원량이 출력되는 것을 확인할 수 있습니다. "

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:54
msgid ""
"Superadmins can view all compute session information currently running (or "
"terminated) in the cluster, and users can view only the sessions they have "
"created."
msgstr ""
"수퍼어드민의 경우 현재 클러스터에서 실행 중인 (또는 종료된) 모든 세션 정보를 확"
"인할 수 있고, 일반 사용자의 경우에는 자신이 사용한 세션만 조회 가능합니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:59
msgid ""
"Compute session list may not be displayed normally due to intermittent network "
"connection problems, and etc. This can be solved by refreshing the browser "
"page."
msgstr ""
"간헐적인 네트워크 접속 불량 등의 문제로 세션 리스트가 정상적으로 표시되지 않는 "
"경우가 발생할 수 있습니다. 이 때는 브라우저 페이지를 갱신해서 해결할 수 있습니"
"다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:64
msgid ""
"Utilize Jupyter Notebook and check the resource quota from inside the container"
msgstr "Jupyter Notebook 앱 활용 및 컨테이너 내부의 자원 할당량 확인"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:66
msgid ""
"Let's look at how to use and manage compute sessions that are already running. "
"If you look at the Control column of the session list, there are several "
"icons. When you click the first icon, the app launcher appears as shown in the "
"figure below, and several app services supported by the session appear."
msgstr ""
"이미 실행 중인 연산 세션을 사용하고 관리하는 법에 관해 살펴보겠습니다. 세션 리"
"스트의 Control 열을 보면 몇 가지 아이콘이 있습니다. 제일 첫 아이콘을 클릭하면 "
"다음 그림과 같이 앱 런처가 뜨면서 해당 세션이 지원하는 몇 가지 앱 서비스가 뜨"
"게 됩니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:75
msgid "Let's click on Jupyter Notebook."
msgstr "Jupyter Notebook을 클릭해봅시다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:79
msgid ""
"A new window pops up and you can see that Jupyter Notebook is running. This "
"notebook was created inside a running compute session and can be used easily "
"with the click of a button without any other settings. Also, there is no need "
"for a separate package installation process because the language environment "
"and library provided by the computation session can be used as it is. For "
"detailed instructions on how to use Jupyter Notebook, please refer to the "
"official documentation."
msgstr ""
"새로운 창이 뜨면서 Jupyter Notebook이 실행되는 것을 확인할 수 있습니다. 이 "
"Notebook은 실행 중인 연산 세션 내부에서 생성된 것으로, 별다른 설정 없이 버튼 클"
"릭만으로 손쉽게 사용할 수 있습니다. 또한, 연산 세션이 기본적으로 제공하는 언어 "
"환경 및 라이브러리를 그대로 활용할 수 있어 별도의 패키지 설치 과정이 필요 없습"
"니다. 자세한 Jupyter Notebook 사용법은 공식 문서 등을 참고하시기 바랍니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:87
msgid ""
"Click the NEW button on the top right and select the Notebook for Backend.AI, "
"then the ipynb window appears where you can enter your own code."
msgstr ""
"우측 상단의 NEW 버튼을 클릭한 후 Backend.AI 용 Notebook을 선택하면 새로운 코드"
"를 입력할 수 있는 ipynb 창이 뜹니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:94
msgid ""
"In this window, you can enter and execute any code you want by using the "
"environment that session provides. The code execution happens on one of the "
"Backend.AI nodes where the compute session is actually created, and there is "
"no need to configure a separate environment on the local machine. Enter the "
"following code and click the Run button or type ``Ctrl-Enter`` to run the "
"code. It is a Python code that reads and prints the resource quota under ``/"
"sys/fs/cgroup/``."
msgstr ""
"이 창에서 세션 환경에 맞는 코드를 입력하고 실행해볼 수 있습니다. 코드는 "
"Backend.AI 서버를 구성하는 노드 중 연산 세션이 실제로 생성된 노드에서 실행이 되"
"며, 로컬 머신에는 별도 환경을 구성할 필요가 없습니다. 다음과 같은 코드를 입력하"
"고 실행 버튼을 클릭하거나 ``Ctrl-Enter`` 를 입력하여 코드를 실행해봅니다. ``/"
"sys/fs/cgroup/`` 하위에 있는 자원 할당량을 읽고 출력하는 파이썬 코드입니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:104
msgid ""
"Since Python is already installed in the TensorFlow 2.2 environment, the code "
"will run without any configuration. Make sure that the amount of core and "
"memory you specified when you first created the compute session is displayed."
msgstr ""
"TensorFlow 2.2 환경에는 이미 파이썬이 설치되어 있으므로, 별다른 설정 없이 코드"
"가 실행될 것입니다. 처음 연산 세션을 생성할 때 지정했던 코어와 메모리 량이 출력"
"되는 것을 확인하십시오."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:109
msgid ""
"The amount of memory may vary slightly depending on the calculation method."
msgstr "메모리 양은 계산 방식의 차이에 따라 값이 다소 차이날 수 있습니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:111
msgid ""
"Like this, after creating a compute session, you can use web apps such as "
"Jupyter Notebook, and in Jupyter Notebook, you can run Python code that checks "
"resource constraints right away without installing a separate packages."
msgstr ""
"이처럼 연산 세션을 생성한 후 Jupyter Notebook 등과 같은 웹 앱을 사용할 수 있으"
"며, Jupyter Notebook에서는 별도의 설치를 하지 않고 바로 자원 제약 상황을 확인하"
"는 Python 코드를 실행할 수 있었습니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:117
msgid "Web terminal"
msgstr "웹 터미널 활용"

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:119
msgid ""
"If you close the Jupyter Notebook app and open the app launcher screen of the "
"math session again, you will see the Console app present. Let's click."
msgstr ""
"Jupyter Notebook 앱을 닫고 다시 연산 세션의 앱 런처 화면을 열면 Console 앱이 있"
"는 것을 볼 수 있습니다. 클릭 해봅시다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:126
msgid ""
"A terminal will also appear in a new window, and you can issue shell commands "
"by accessing inside the computational session as shown in the following "
"figure. If you are familiar with using commands, you can easily issue various "
"Linux commands. You can see that the Untitled.ipynb file automatically "
"generated in Jupyter Notebook is viewed through the ``ls`` command. This is "
"proof that both apps are running in the same container environment."
msgstr ""
"터미널 역시 새 창에서 뜨게 되며, 다음 그림처럼 연산 세션 내부에 접속해서 쉘 명"
"령을 내릴 수 있습니다. 커맨드 사용에 익숙한 분이라면 손쉽게 여러 가지 리눅스 명"
"령을 내릴 수가 있습니다. Jupyter Notebook에서 자동 생성된 Untitled.ipynb 파일"
"이 ``ls`` 명령을 통해 조회되는 것을 볼 수 있습니다. 두 앱이 같은 컨테이너 환경"
"에서 돌아가고 있다는 증거입니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:133
msgid ""
"In addition to this, you can use web-based services such as TensorBoard, "
"Jupyter Lab, etc., depending on the type of service provided by the compute "
"session."
msgstr ""
"이 외에도 연산 세션이 제공하는 서비스의 종류에 따라 TensorBoard, Jupyter Lab 등"
"과 같은 웹 기반 서비스를 이용할 수 있습니다."

#: ../../allocate_cpu_mem/allocate_cpu_mem.rst:136
msgid "To delete a specific session, simply click on the red power icon."
msgstr "특정 세션을 삭제하기 위해서는 빨간색 전원 아이콘을 클릭하면 됩니다."
